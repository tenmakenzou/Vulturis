// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package database

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, price, category, image, stock, description, slug)
VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, name, price, category, image, stock, description, slug
`

type CreateProductParams struct {
	Name        string
	Price       string
	Category    string
	Image       sql.NullString
	Stock       int32
	Description sql.NullString
	Slug        string
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Name,
		arg.Price,
		arg.Category,
		arg.Image,
		arg.Stock,
		arg.Description,
		arg.Slug,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Category,
		&i.Image,
		&i.Stock,
		&i.Description,
		&i.Slug,
	)
	return i, err
}

const deleteProductById = `-- name: DeleteProductById :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProductById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProductById, id)
	return err
}

const getAllProducts = `-- name: GetAllProducts :many
SELECT id, name, price, category, image, stock, description, slug
FROM products
`

func (q *Queries) GetAllProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getAllProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.Category,
			&i.Image,
			&i.Stock,
			&i.Description,
			&i.Slug,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductById = `-- name: GetProductById :one
SELECT id, name, price, category, image, stock, description, slug FROM products WHERE id = $1
`

func (q *Queries) GetProductById(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Category,
		&i.Image,
		&i.Stock,
		&i.Description,
		&i.Slug,
	)
	return i, err
}

const getProductBySlug = `-- name: GetProductBySlug :one
SELECT id, name, price, category, image, stock, description, slug FROM products WHERE slug = $1
`

func (q *Queries) GetProductBySlug(ctx context.Context, slug string) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductBySlug, slug)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Category,
		&i.Image,
		&i.Stock,
		&i.Description,
		&i.Slug,
	)
	return i, err
}

const updateProduct = `-- name: UpdateProduct :one
UPDATE products
SET name = $1, price = $2, category = $3, image = $4, stock = $5, description = $6, slug = $7
WHERE id = $8
RETURNING id, name, price, category, image, stock, description, slug
`

type UpdateProductParams struct {
	Name        string
	Price       string
	Category    string
	Image       sql.NullString
	Stock       int32
	Description sql.NullString
	Slug        string
	ID          int32
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, updateProduct,
		arg.Name,
		arg.Price,
		arg.Category,
		arg.Image,
		arg.Stock,
		arg.Description,
		arg.Slug,
		arg.ID,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.Category,
		&i.Image,
		&i.Stock,
		&i.Description,
		&i.Slug,
	)
	return i, err
}
